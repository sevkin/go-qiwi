// Package wallet provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package wallet

import (
	"time"
)

// Identification defines model for Identification.
type Identification struct {

	// Дата рождения пользователя
	BirthDate *string `json:"birthDate,omitempty"`

	// Имя пользователя
	FirstName *string `json:"firstName,omitempty"`

	// Номер кошелька пользователя
	Id *int `json:"id,omitempty"`

	// ИНН пользователя
	Inn *string `json:"inn,omitempty"`

	// Фамилия пользователя
	LastName *string `json:"lastName,omitempty"`

	// Отчество пользователя
	MiddleName *string `json:"middleName,omitempty"`

	// Номер полиса ОМС пользователя
	Oms *string `json:"oms,omitempty"`

	// Серия и номер паспорта пользователя
	Passport *string `json:"passport,omitempty"`

	// Номер СНИЛС пользователя
	Snils *string `json:"snils,omitempty"`

	// Текущий уровень идентификации кошелька
	// - SIMPLE - без идентификации
	// - VERIFIED - упрощенная идентификация (данные для идентификации успешно прошли проверку)
	// - FULL – если кошелек уже ранее получал полную идентификацию по данным ФИО, номеру паспорта и дате рождения.
	Type *string `json:"type,omitempty"`
}

// Limits defines model for Limits.
type Limits struct {

	// Описание лимитов
	Limits *struct {

		// Массив лимитов на операции
		RU *[]struct {

			// Валюта операций
			Currency *string `json:"currency,omitempty"`

			// Значение лимита
			Max *float32 `json:"max,omitempty"`

			// Остаток лимита, который можно потратить в данный период (период задается в параметре interval)
			Rest *float32 `json:"rest,omitempty"`

			// Сумма, потраченная по данным операциям
			Spent *float32 `json:"spent,omitempty"`

			// Тип операций, на которые действует данный лимит
			Type *string `json:"type,omitempty"`
		} `json:"RU,omitempty"`
	} `json:"limits,omitempty"`
}

// Payments defines model for Payments.
type Payments struct {

	// Список транзакций. Число платежей равно параметру rows из запроса
	Data *[]struct {

		// Для платежей - номер счета получателя. Для пополнений - номер отправителя, терминала или название агента пополнения кошелька
		Account *string `json:"account,omitempty"`

		// Специальное поле
		BankDocumentAvailable *bool `json:"bankDocumentAvailable,omitempty"`

		// Специальное поле
		BankDocumentReady *bool `json:"bankDocumentReady,omitempty"`

		// Специальное поле
		ChequeReady *bool `json:"chequeReady,omitempty"`

		// Комментарий к платежу
		Comment *string `json:"comment,omitempty"`

		// Данные о комиссии платежа.
		Commission *struct {

			// сумма
			Amount *float32 `json:"amount,omitempty"`

			// валюта
			Currency *string `json:"currency,omitempty"`
		} `json:"commission,omitempty"`

		// Курс конвертации (если применяется в транзакции)
		CurrencyRate *float32 `json:"currencyRate,omitempty"`

		// Дата/время платежа, во временной зоне запроса (см. параметр startDate).
		Date *time.Time `json:"date,omitempty"`

		// Описание ошибки
		Error *string `json:"error,omitempty"`

		// Код ошибки платежа
		ErrorCode *int `json:"errorCode,omitempty"`

		// Служебная информация
		Extras *map[string]interface{} `json:"extras,omitempty"`

		// Специальное поле
		FavoritePaymentEnabled *bool `json:"favoritePaymentEnabled,omitempty"`

		// Номер кошелька
		PersonId *int `json:"personId,omitempty"`

		// Данные о провайдере.
		Provider *struct {

			// описание провайдера (HTML)
			Description *string `json:"description,omitempty"`

			// ID провайдера в QIWI Wallet
			Id *int `json:"id,omitempty"`

			// список ключевых слов
			Keys *string `json:"keys,omitempty"`

			// ссылка на логотип провайдера
			LogoUrl *string `json:"logoUrl,omitempty"`

			// развернутое наименование провайдера
			LongName *string `json:"longName,omitempty"`

			// краткое наименование провайдера
			ShortName *string `json:"shortName,omitempty"`

			// сайт провайдера
			SiteUrl *string `json:"siteUrl,omitempty"`
		} `json:"provider,omitempty"`

		// Специальное поле
		RegularPaymentEnabled *bool `json:"regularPaymentEnabled,omitempty"`

		// Специальное поле
		RepeatPaymentEnabled *bool `json:"repeatPaymentEnabled,omitempty"`

		// Статус платежа. Возможные значения - WAITING - платеж проводится
		// - SUCCESS - успешный платеж
		// - ERROR - ошибка платежа
		Status *string `json:"status,omitempty"`

		// Текстовое описание статуса платежа
		StatusText *string `json:"statusText,omitempty"`

		// Данные о сумме платежа или пополнения.
		Sum *struct {

			// сумма
			Amount *float32 `json:"amount,omitempty"`

			// валюта
			Currency *string `json:"currency,omitempty"`
		} `json:"sum,omitempty"`

		// Данные о фактической сумме платежа или пополнения
		Total *struct {

			// сумма (равна сумме платежа sum.amount и комиссии commission.amount)
			Amount *float32 `json:"amount,omitempty"`

			// валюта
			Currency *string `json:"currency,omitempty"`
		} `json:"total,omitempty"`

		// Клиентский ID транзакции
		TrmTxnId *string `json:"trmTxnId,omitempty"`

		// ID транзакции в процессинге QIWI Wallet
		TxnId *int `json:"txnId,omitempty"`

		// Тип платежа. Возможные значения
		// - IN - пополнение
		// - OUT - платеж
		// - QIWI_CARD - платеж с карт QIWI (QVC, QVP)
		Type *string `json:"type,omitempty"`
	} `json:"data,omitempty"`

	// Дата/время следующей транзакции в полном списке
	NextTxnDate *time.Time `json:"nextTxnDate,omitempty"`

	// ID следующей транзакции в полном списке
	NextTxnId *int `json:"nextTxnId,omitempty"`
}

// PaymentsTotal defines model for PaymentsTotal.
type PaymentsTotal struct {

	// Данные о входящих платежах (пополнениях), отдельно по каждой валюте
	IncomingTotal *[]struct {

		// Сумма пополнений за период
		Amount *float32 `json:"amount,omitempty"`

		// Валюта пополнений
		Currency *string `json:"currency,omitempty"`
	} `json:"incomingTotal,omitempty"`

	// Данные об исходящих платежах, отдельно по каждой валюте
	OutgoingTotal *[]struct {

		// Сумма платежей за период
		Amount *float32 `json:"amount,omitempty"`

		// Валюта платежей
		Currency *string `json:"currency,omitempty"`
	} `json:"outgoingTotal,omitempty"`
}

// PersonProfile defines model for PersonProfile.
type PersonProfile struct {

	// Текущие настройки авторизации
	AuthInfo *struct {

		// E-mail, привязанный к кошельку. Если отсутствует, то null
		BoundEmail *string `json:"boundEmail,omitempty"`

		// IP-адрес последней пользовательской сессии
		Ip *string `json:"ip,omitempty"`

		// Дата/время последней сессии в QIWI Кошельке
		LastLoginDate *time.Time `json:"lastLoginDate,omitempty"`

		// Данные о PIN-коде мобильного приложения QIWI Кошелька
		MobilePinInfo *struct {

			// Дата/время последнего изменения PIN-кода мобильного приложения QIWI Кошелька
			LastMobilePinChange *time.Time `json:"lastMobilePinChange,omitempty"`

			// Логический признак использования PIN-кода (фактически означает, что мобильное приложение используется)
			MobilePinUsed *bool `json:"mobilePinUsed,omitempty"`

			// Дата/время следующего (планового) изменения PIN-кода мобильного приложения QIWI Кошелька
			NextMobilePinChange *time.Time `json:"nextMobilePinChange,omitempty"`
		} `json:"mobilePinInfo,omitempty"`

		// Данные об использовании пароля к сайту qiwi.com
		PassInfo *struct {

			// Дата/время последнего изменения пароля сайта qiwi.com
			LastPassChange *time.Time `json:"lastPassChange,omitempty"`

			// Дата/время следующего (планового) изменения пароля сайта qiwi.com
			NextPassChange *time.Time `json:"nextPassChange,omitempty"`

			// Логический признак использования пароля (фактически означает использование сайта qiwi.com)
			PasswordUsed *bool `json:"passwordUsed,omitempty"`
		} `json:"passInfo,omitempty"`

		// Номер кошелька
		PersonId *int `json:"personId,omitempty"`

		// Данные об использовании PIN-кода к приложению QIWI Кошелька на QIWI терминалах самообслуживания
		PinInfo *struct {

			// Логический признак использования PIN-кода для терминала (фактически означает факт использования приложения QIWI Кошелька на терминале)
			PinUsed *bool `json:"pinUsed,omitempty"`
		} `json:"pinInfo,omitempty"`

		// Дата/время регистрации QIWI Кошелька (через сайт/мобильное приложение, либо другим способом)
		RegistrationDate *time.Time `json:"registrationDate,omitempty"`
	} `json:"authInfo,omitempty"`

	// Информация о кошельке
	ContractInfo *struct {

		// Логический признак блокировки кошелька
		Blocked *bool `json:"blocked,omitempty"`

		// Номер кошелька
		ContractId *int `json:"contractId,omitempty"`

		// Дата/время создания QIWI Кошелька (через сайт/мобильное приложение, либо при первом пополнении, либо другим способом)
		CreationDate *time.Time `json:"creationDate,omitempty"`

		// Служебная информация
		Features *[]map[string]interface{} `json:"features,omitempty"`

		// Данные об идентификации пользователя
		IdentificationInfo *[]struct {

			// Акроним системы, в которой пользователь получил идентификацию
			// - QIWI - QIWI Кошелек
			BankAlias *string `json:"bankAlias,omitempty"`

			// Текущий уровень идентификации кошелька. Возможные значения
			// - ANONYMOUS - без идентификации
			// - SIMPLE, VERIFIED - упрощенная идентификация
			// - FULL - полная идентификация
			IdentificationLevel *string `json:"identificationLevel,omitempty"`
		} `json:"identificationInfo,omitempty"`
	} `json:"contractInfo,omitempty"`

	// Прочие пользовательские данные
	UserInfo *struct {

		// Код валюты баланса кошелька по умолчанию (number-3 ISO-4217)
		DefaultPayCurrency *int `json:"defaultPayCurrency,omitempty"`

		// Служебная информация
		DefaultPaySource *int `json:"defaultPaySource,omitempty"`

		// E-mail пользователя
		Email *string `json:"email,omitempty"`

		// Номер первой транзакции после регистрации
		FirstTxnId *int `json:"firstTxnId,omitempty"`

		// Служебная информация
		Language *string `json:"language,omitempty"`

		// Название мобильного оператора номера пользователя
		Operator *string `json:"operator,omitempty"`

		// Служебная информация
		PhoneHash *string `json:"phoneHash,omitempty"`

		// Служебная информация
		PromoEnabled *string `json:"promoEnabled,omitempty"`
	} `json:"userInfo,omitempty"`
}

// Transaction defines model for Transaction.
type Transaction struct {

	// Для платежей - номер счета получателя. Для пополнений - номер отправителя, терминала или название агента пополнения кошелька
	Account *string `json:"account,omitempty"`

	// Специальное поле
	BankDocumentAvailable *bool `json:"bankDocumentAvailable,omitempty"`

	// Специальное поле
	ChequeReady *bool `json:"chequeReady,omitempty"`

	// Комментарий к платежу
	Comment *string `json:"comment,omitempty"`

	// Данные о комиссии платежа.
	Commission *struct {

		// сумма
		Amount *float32 `json:"amount,omitempty"`

		// валюта
		Currency *string `json:"currency,omitempty"`
	} `json:"commission,omitempty"`

	// Курс конвертации (если применяется в транзакции)
	CurrencyRate *float32 `json:"currencyRate,omitempty"`

	// Дата/время платежа, время московское (в формате ГГГГ-ММ-ДД'T'чч:мм:сс+03:00)
	Date *time.Time `json:"date,omitempty"`

	// Описание ошибки
	Error *string `json:"error,omitempty"`

	// Код ошибки платежа
	ErrorCode *int `json:"errorCode,omitempty"`

	// Служебная информация
	Extras *map[string]interface{} `json:"extras,omitempty"`

	// Специальное поле
	FavoritePaymentEnabled *bool `json:"favoritePaymentEnabled,omitempty"`

	// Номер кошелька
	PersonId *int `json:"personId,omitempty"`

	// Данные о провайдере.
	Provider *struct {

		// описание провайдера (HTML)
		Description *string `json:"description,omitempty"`

		// ID провайдера в QIWI Wallet
		Id *int `json:"id,omitempty"`

		// список ключевых слов
		Keys *string `json:"keys,omitempty"`

		// ссылка на логотип провайдера
		LogoUrl *string `json:"logoUrl,omitempty"`

		// развернутое наименование провайдера
		LongName *string `json:"longName,omitempty"`

		// краткое наименование провайдера
		ShortName *string `json:"shortName,omitempty"`

		// сайт провайдера
		SiteUrl *string `json:"siteUrl,omitempty"`
	} `json:"provider,omitempty"`

	// Специальное поле
	RegularPaymentEnabled *bool `json:"regularPaymentEnabled,omitempty"`

	// Специальное поле
	RepeatPaymentEnabled *bool `json:"repeatPaymentEnabled,omitempty"`

	// Служебная информация
	Source *map[string]interface{} `json:"source,omitempty"`

	// Статус платежа. Возможные значения
	// - WAITING - платеж проводится
	// - SUCCESS - успешный платеж
	// - ERROR - ошибка платежа
	Status *string `json:"status,omitempty"`

	// Текстовое описание статуса платежа
	StatusText *string `json:"statusText,omitempty"`

	// Данные о сумме платежа или пополнения.
	Sum *struct {

		// сумма
		Amount *float32 `json:"amount,omitempty"`

		// валюта
		Currency *string `json:"currency,omitempty"`
	} `json:"sum,omitempty"`

	// Данные о фактической сумме платежа или пополнения.
	Total *struct {

		// сумма (равна сумме платежа sum.amount и комиссии commission.amount)
		Amount *float32 `json:"amount,omitempty"`

		// валюта
		Currency *string `json:"currency,omitempty"`
	} `json:"total,omitempty"`

	// Клиентский ID транзакции
	TrmTxnId *string `json:"trmTxnId,omitempty"`

	// Копия параметра transactionId из запроса
	TxnId *int `json:"txnId,omitempty"`

	// Копия параметра type из запроса
	Type *string `json:"type,omitempty"`
}

// PostIdentificationJSONBody defines parameters for PostIdentification.
type PostIdentificationJSONBody Identification

// GetChequeBytesParams defines parameters for GetChequeBytes.
type GetChequeBytesParams struct {

	// Тип платежа. Возможные значения - IN - пополнение - OUT - платеж - QIWI_CARD - платеж с карт QIWI (QVC, QVP)
	Type   *string `json:"type,omitempty"`
	Format *string `json:"format,omitempty"`
}

// SendChequeJSONBody defines parameters for SendCheque.
type SendChequeJSONBody struct {

	// Адрес для отправки электронной квитанции
	Email string `json:"email"`
}

// SendChequeParams defines parameters for SendCheque.
type SendChequeParams struct {

	// Тип платежа. Возможные значения
	// - IN - пополнение
	// - OUT - платеж
	// - QIWI_CARD - платеж с карт QIWI (QVC, QVP)
	Type *string `json:"type,omitempty"`
}

// GetPaymentHistoryByUserParams defines parameters for GetPaymentHistoryByUser.
type GetPaymentHistoryByUserParams struct {

	// Число платежей в ответе, для разбивки отчета на части. Целое число от 1 до 50
	Rows int `json:"rows"`

	// Тип операций в отчете, для отбора. Допустимые значения
	// - ALL - все операции
	// - IN - только пополнения
	// - OUT - только платежи
	// - QIWI_CARD - только платежи по картам QIWI (QVC, QVP)
	Operation *string `json:"operation,omitempty"`

	// Список источников платежа, для фильтра. Допустимые значения
	// - QW_RUB - рублевый счет кошелька
	// - QW_USD - счет кошелька в долларах
	// - QW_EUR - счет кошелька в евро
	// - CARD - привязанные и непривязанные к кошельку банковские карты
	// - MK - счет мобильного оператора. Если не указан, учитываются все источники
	Sources *[]string `json:"sources,omitempty"`

	// Начальная дата поиска платежей. Используется только вместе с endDate. По умолчанию, равна суточному сдвигу от текущей даты по московскому времени. Максимальный допустимый интервал между startDate и endDate - 90 календарных дней.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Конечная дата поиска платежей. Используется только вместе со startDate. По умолчанию, равна текущим дате/времени по московскому времени.
	EndDate *time.Time `json:"endDate,omitempty"`

	// Дата транзакции для начала отчета (должна быть равна параметру nextTxnDate в предыдущем списке). Используется только вместе с nextTxnId
	NextTxnDate *time.Time `json:"nextTxnDate,omitempty"`

	// Номер транзакции для начала отчета (должен быть равен параметру nextTxnId в предыдущем списке). Используется только вместе с nextTxnDate
	NextTxnId *int `json:"nextTxnId,omitempty"`
}

// GetPaymentHistoryTotalByUserParams defines parameters for GetPaymentHistoryTotalByUser.
type GetPaymentHistoryTotalByUserParams struct {

	// Начальная дата поиска платежей. Используется только вместе с endDate. По умолчанию, равна суточному сдвигу от текущей даты по московскому времени. Максимальный допустимый интервал между startDate и endDate - 90 календарных дней.
	StartDate *time.Time `json:"startDate,omitempty"`

	// Конечная дата поиска платежей. Используется только вместе со startDate. По умолчанию, равна текущим дате/времени по московскому времени.
	EndDate *time.Time `json:"endDate,omitempty"`

	// Тип операций в отчете, для отбора. Допустимые значения
	// - ALL - все операции
	// - IN - только пополнения
	// - OUT - только платежи
	// - QIWI_CARD - только платежи по картам QIWI (QVC, QVP)
	Operation *string `json:"operation,omitempty"`

	// Список источников платежа, для фильтра. Допустимые значения
	// - QW_RUB - рублевый счет кошелька
	// - QW_USD - счет кошелька в долларах
	// - QW_EUR - счет кошелька в евро
	// - CARD - привязанные и непривязанные к кошельку банковские карты
	// - MK - счет мобильного оператора. Если не указан, учитываются все источники
	Sources *[]string `json:"sources,omitempty"`
}

// GetPaymentHistoryByTransactionParams defines parameters for GetPaymentHistoryByTransaction.
type GetPaymentHistoryByTransactionParams struct {

	// Тип платежа. Возможные значения
	// - IN - пополнение
	// - OUT - платеж
	// - QIWI_CARD - платеж с карт QIWI (QVC, QVP)
	Type *string `json:"type,omitempty"`
}

// GetPersonProfileParams defines parameters for GetPersonProfile.
type GetPersonProfileParams struct {

	// выгрузить настройки авторизации пользователя
	AuthInfoEnabled *bool `json:"authInfoEnabled,omitempty"`

	// выгрузить данные о кошельке пользователя
	ContractInfoEnabled *bool `json:"contractInfoEnabled,omitempty"`

	// выгрузить прочие пользовательские данные
	UserInfoEnabled *bool `json:"userInfoEnabled,omitempty"`
}

// GetLimitsParams defines parameters for GetLimits.
type GetLimitsParams struct {

	// Список типов операций, по которым запрашиваются лимиты. Допустимые типы операций
	// - REFILL - максимальный допустимый остаток на счёте
	// - TURNOVER - оборот в месяц
	// - PAYMENTS_P2P - переводы на другие кошельки в месяц
	// - PAYMENTS_PROVIDER_INTERNATIONALS - платежи в адрес иностранных компаний в месяц
	// - PAYMENTS_PROVIDER_PAYOUT - Переводы на банковские счета и карты, кошельки других систем
	// - WITHDRAW_CASH - снятие наличных в месяц.
	// Должен быть указан хотя бы один тип операций.
	Types []string `json:"types"`
}

// PostIdentificationRequestBody defines body for PostIdentification for application/json ContentType.
type PostIdentificationJSONRequestBody PostIdentificationJSONBody

// SendChequeRequestBody defines body for SendCheque for application/json ContentType.
type SendChequeJSONRequestBody SendChequeJSONBody

